{
  "service": {
    "service": "vinay-online-sastry",
    "serviceObject": {
      "name": "vinay-online-sastry"
    },
    "provider": {
      "stage": "dev",
      "variableSyntax": "\\${([^{}]+?)}",
      "name": "aws",
      "runtime": "nodejs10.x",
      "timeout": 20,
      "region": "us-east-1",
      "versionFunctions": true,
      "remoteFunctionData": null,
      "environment": {
        "STRIPE_SECRET_KEY": "sk_test_d2r0vZbC6E2GYSdKfXYKtuat",
        "TWILIO_ACCOUNT_SID": "AC63722298f74133d875a71ed1fe580349",
        "TWILIO_AUTH_TOKEN": "030133ea981d5429de71488f9aef85e1",
        "VERIFICATION_SID": "VAe65a81204367120c0cb0eb67d0fff7a3",
        "FROM_EMAIL": "kumarkvm070@gmail.com",
        "TO_EMAIL": "onlinesastry.test@gmail.com"
      },
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "HelloLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/vinay-online-sastry-dev-hello"
            }
          },
          "GetAllPujasLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/vinay-online-sastry-dev-getAllPujas"
            }
          },
          "GetPujaLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/vinay-online-sastry-dev-getPuja"
            }
          },
          "CreateCustomerLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/vinay-online-sastry-dev-createCustomer"
            }
          },
          "PaymentLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/vinay-online-sastry-dev-payment"
            }
          },
          "CreatePujaLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/vinay-online-sastry-dev-createPuja"
            }
          },
          "UpdatePujaLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/vinay-online-sastry-dev-updatePuja"
            }
          },
          "DeletePujaLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/vinay-online-sastry-dev-deletePuja"
            }
          },
          "GetFaqLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/vinay-online-sastry-dev-getFaq"
            }
          },
          "GetAllFaqsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/vinay-online-sastry-dev-getAllFaqs"
            }
          },
          "CreateFaqLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/vinay-online-sastry-dev-createFaq"
            }
          },
          "UpdateFaqLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/vinay-online-sastry-dev-updateFaq"
            }
          },
          "DeleteFaqLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/vinay-online-sastry-dev-deleteFaq"
            }
          },
          "CreateBookingLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/vinay-online-sastry-dev-createBooking"
            }
          },
          "GetAllBookingsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/vinay-online-sastry-dev-getAllBookings"
            }
          },
          "GetBookingsByPhoneNumberLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/vinay-online-sastry-dev-getBookingsByPhoneNumber"
            }
          },
          "DeleteBookingLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/vinay-online-sastry-dev-deleteBooking"
            }
          },
          "SearchPujaLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/vinay-online-sastry-dev-searchPuja"
            }
          },
          "GetLanguagesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/vinay-online-sastry-dev-getLanguages"
            }
          },
          "SendOTPLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/vinay-online-sastry-dev-sendOTP"
            }
          },
          "VerifyOtpLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/vinay-online-sastry-dev-verifyOtp"
            }
          },
          "CreateAppSettingsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/vinay-online-sastry-dev-createAppSettings"
            }
          },
          "CancelBookingLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/vinay-online-sastry-dev-cancelBooking"
            }
          },
          "RescheduleLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/vinay-online-sastry-dev-reschedule"
            }
          },
          "GetAllAppSettingsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/vinay-online-sastry-dev-getAllAppSettings"
            }
          },
          "UpdateAppSettingsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/vinay-online-sastry-dev-updateAppSettings"
            }
          },
          "DeleteAppSettingsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/vinay-online-sastry-dev-deleteAppSettings"
            }
          },
          "GetAppSettingsValueByKeyLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/vinay-online-sastry-dev-getAppSettingsValueByKey"
            }
          },
          "SendEmailLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/vinay-online-sastry-dev-sendEmail"
            }
          },
          "GetAllPujarisLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/vinay-online-sastry-dev-getAllPujaris"
            }
          },
          "CreatePujariLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/vinay-online-sastry-dev-createPujari"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "vinay-online-sastry-dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/vinay-online-sastry-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/vinay-online-sastry-dev*:*:*"
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "vinay-online-sastry-dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "HelloLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/vinay-online-sastry/dev/1588863487604-2020-05-07T14:58:07.604Z/vinay-online-sastry.zip"
              },
              "FunctionName": "vinay-online-sastry-dev-hello",
              "Handler": "handler.hello",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs10.x",
              "Timeout": 20,
              "Environment": {
                "Variables": {
                  "STRIPE_SECRET_KEY": "sk_test_d2r0vZbC6E2GYSdKfXYKtuat",
                  "TWILIO_ACCOUNT_SID": "AC63722298f74133d875a71ed1fe580349",
                  "TWILIO_AUTH_TOKEN": "030133ea981d5429de71488f9aef85e1",
                  "VERIFICATION_SID": "VAe65a81204367120c0cb0eb67d0fff7a3",
                  "FROM_EMAIL": "kumarkvm070@gmail.com",
                  "TO_EMAIL": "onlinesastry.test@gmail.com"
                }
              }
            },
            "DependsOn": [
              "HelloLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "HelloLambdaVersionuXKCTWMvzVdGGZMJYjoE8AsdRh2Hn3TkqJB3oeFEAU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "HelloLambdaFunction"
              },
              "CodeSha256": "b552vmh25DrFA8c7xwuHtKSyAY7UrckKcD/CHI24eN8="
            }
          },
          "GetAllPujasLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/vinay-online-sastry/dev/1588863487604-2020-05-07T14:58:07.604Z/vinay-online-sastry.zip"
              },
              "FunctionName": "vinay-online-sastry-dev-getAllPujas",
              "Handler": "functions/index.readAllPujas",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs10.x",
              "Timeout": 20,
              "Environment": {
                "Variables": {
                  "STRIPE_SECRET_KEY": "sk_test_d2r0vZbC6E2GYSdKfXYKtuat",
                  "TWILIO_ACCOUNT_SID": "AC63722298f74133d875a71ed1fe580349",
                  "TWILIO_AUTH_TOKEN": "030133ea981d5429de71488f9aef85e1",
                  "VERIFICATION_SID": "VAe65a81204367120c0cb0eb67d0fff7a3",
                  "FROM_EMAIL": "kumarkvm070@gmail.com",
                  "TO_EMAIL": "onlinesastry.test@gmail.com"
                }
              }
            },
            "DependsOn": [
              "GetAllPujasLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "GetAllPujasLambdaVersionpaIPwFKBksVXLqNBvdgdxFaIK4ec3gSyvbszlXI3dEY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetAllPujasLambdaFunction"
              },
              "CodeSha256": "b552vmh25DrFA8c7xwuHtKSyAY7UrckKcD/CHI24eN8="
            }
          },
          "GetPujaLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/vinay-online-sastry/dev/1588863487604-2020-05-07T14:58:07.604Z/vinay-online-sastry.zip"
              },
              "FunctionName": "vinay-online-sastry-dev-getPuja",
              "Handler": "functions/index.getPujaById",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs10.x",
              "Timeout": 20,
              "Environment": {
                "Variables": {
                  "STRIPE_SECRET_KEY": "sk_test_d2r0vZbC6E2GYSdKfXYKtuat",
                  "TWILIO_ACCOUNT_SID": "AC63722298f74133d875a71ed1fe580349",
                  "TWILIO_AUTH_TOKEN": "030133ea981d5429de71488f9aef85e1",
                  "VERIFICATION_SID": "VAe65a81204367120c0cb0eb67d0fff7a3",
                  "FROM_EMAIL": "kumarkvm070@gmail.com",
                  "TO_EMAIL": "onlinesastry.test@gmail.com"
                }
              }
            },
            "DependsOn": [
              "GetPujaLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "GetPujaLambdaVersionCl1Mc2Bc4tc0bcK65UZbrHdryukBxs13VAnZJa0iO0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetPujaLambdaFunction"
              },
              "CodeSha256": "b552vmh25DrFA8c7xwuHtKSyAY7UrckKcD/CHI24eN8="
            }
          },
          "CreateCustomerLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/vinay-online-sastry/dev/1588863487604-2020-05-07T14:58:07.604Z/vinay-online-sastry.zip"
              },
              "FunctionName": "vinay-online-sastry-dev-createCustomer",
              "Handler": "functions/index.createCustomer",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs10.x",
              "Timeout": 20,
              "Environment": {
                "Variables": {
                  "STRIPE_SECRET_KEY": "sk_test_d2r0vZbC6E2GYSdKfXYKtuat",
                  "TWILIO_ACCOUNT_SID": "AC63722298f74133d875a71ed1fe580349",
                  "TWILIO_AUTH_TOKEN": "030133ea981d5429de71488f9aef85e1",
                  "VERIFICATION_SID": "VAe65a81204367120c0cb0eb67d0fff7a3",
                  "FROM_EMAIL": "kumarkvm070@gmail.com",
                  "TO_EMAIL": "onlinesastry.test@gmail.com"
                }
              }
            },
            "DependsOn": [
              "CreateCustomerLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "CreateCustomerLambdaVersionVXeMxIqobmptyh0aBiH7JFye3ue0zdllefn53kXkpM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateCustomerLambdaFunction"
              },
              "CodeSha256": "b552vmh25DrFA8c7xwuHtKSyAY7UrckKcD/CHI24eN8="
            }
          },
          "PaymentLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/vinay-online-sastry/dev/1588863487604-2020-05-07T14:58:07.604Z/vinay-online-sastry.zip"
              },
              "FunctionName": "vinay-online-sastry-dev-payment",
              "Handler": "functions/index.payment",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs10.x",
              "Timeout": 20,
              "Environment": {
                "Variables": {
                  "STRIPE_SECRET_KEY": "sk_test_d2r0vZbC6E2GYSdKfXYKtuat",
                  "TWILIO_ACCOUNT_SID": "AC63722298f74133d875a71ed1fe580349",
                  "TWILIO_AUTH_TOKEN": "030133ea981d5429de71488f9aef85e1",
                  "VERIFICATION_SID": "VAe65a81204367120c0cb0eb67d0fff7a3",
                  "FROM_EMAIL": "kumarkvm070@gmail.com",
                  "TO_EMAIL": "onlinesastry.test@gmail.com"
                }
              }
            },
            "DependsOn": [
              "PaymentLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "PaymentLambdaVersionnGmnseNqS4XwktJcOdBOVXovR12yD8MpPMZWtYm4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "PaymentLambdaFunction"
              },
              "CodeSha256": "b552vmh25DrFA8c7xwuHtKSyAY7UrckKcD/CHI24eN8="
            }
          },
          "CreatePujaLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/vinay-online-sastry/dev/1588863487604-2020-05-07T14:58:07.604Z/vinay-online-sastry.zip"
              },
              "FunctionName": "vinay-online-sastry-dev-createPuja",
              "Handler": "functions/index.createPuja",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs10.x",
              "Timeout": 20,
              "Environment": {
                "Variables": {
                  "STRIPE_SECRET_KEY": "sk_test_d2r0vZbC6E2GYSdKfXYKtuat",
                  "TWILIO_ACCOUNT_SID": "AC63722298f74133d875a71ed1fe580349",
                  "TWILIO_AUTH_TOKEN": "030133ea981d5429de71488f9aef85e1",
                  "VERIFICATION_SID": "VAe65a81204367120c0cb0eb67d0fff7a3",
                  "FROM_EMAIL": "kumarkvm070@gmail.com",
                  "TO_EMAIL": "onlinesastry.test@gmail.com"
                }
              }
            },
            "DependsOn": [
              "CreatePujaLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "CreatePujaLambdaVersionFVt7ncpHx119FTPsMK1mxTQCqTmofx9JdrGckncedy4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreatePujaLambdaFunction"
              },
              "CodeSha256": "b552vmh25DrFA8c7xwuHtKSyAY7UrckKcD/CHI24eN8="
            }
          },
          "UpdatePujaLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/vinay-online-sastry/dev/1588863487604-2020-05-07T14:58:07.604Z/vinay-online-sastry.zip"
              },
              "FunctionName": "vinay-online-sastry-dev-updatePuja",
              "Handler": "functions/index.updatePuja",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs10.x",
              "Timeout": 20,
              "Environment": {
                "Variables": {
                  "STRIPE_SECRET_KEY": "sk_test_d2r0vZbC6E2GYSdKfXYKtuat",
                  "TWILIO_ACCOUNT_SID": "AC63722298f74133d875a71ed1fe580349",
                  "TWILIO_AUTH_TOKEN": "030133ea981d5429de71488f9aef85e1",
                  "VERIFICATION_SID": "VAe65a81204367120c0cb0eb67d0fff7a3",
                  "FROM_EMAIL": "kumarkvm070@gmail.com",
                  "TO_EMAIL": "onlinesastry.test@gmail.com"
                }
              }
            },
            "DependsOn": [
              "UpdatePujaLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "UpdatePujaLambdaVersioncm8t7ddls368TPoWNdiKR9TjiRSTCkkKmbtGloPj58": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdatePujaLambdaFunction"
              },
              "CodeSha256": "b552vmh25DrFA8c7xwuHtKSyAY7UrckKcD/CHI24eN8="
            }
          },
          "DeletePujaLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/vinay-online-sastry/dev/1588863487604-2020-05-07T14:58:07.604Z/vinay-online-sastry.zip"
              },
              "FunctionName": "vinay-online-sastry-dev-deletePuja",
              "Handler": "functions/index.deletePuja",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs10.x",
              "Timeout": 20,
              "Environment": {
                "Variables": {
                  "STRIPE_SECRET_KEY": "sk_test_d2r0vZbC6E2GYSdKfXYKtuat",
                  "TWILIO_ACCOUNT_SID": "AC63722298f74133d875a71ed1fe580349",
                  "TWILIO_AUTH_TOKEN": "030133ea981d5429de71488f9aef85e1",
                  "VERIFICATION_SID": "VAe65a81204367120c0cb0eb67d0fff7a3",
                  "FROM_EMAIL": "kumarkvm070@gmail.com",
                  "TO_EMAIL": "onlinesastry.test@gmail.com"
                }
              }
            },
            "DependsOn": [
              "DeletePujaLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "DeletePujaLambdaVersionTX7bpHxlfY8IhlpAyMrTroJtx2PWMG6e9MrpPg4BCPE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeletePujaLambdaFunction"
              },
              "CodeSha256": "b552vmh25DrFA8c7xwuHtKSyAY7UrckKcD/CHI24eN8="
            }
          },
          "GetFaqLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/vinay-online-sastry/dev/1588863487604-2020-05-07T14:58:07.604Z/vinay-online-sastry.zip"
              },
              "FunctionName": "vinay-online-sastry-dev-getFaq",
              "Handler": "functions/index.getFaqById",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs10.x",
              "Timeout": 20,
              "Environment": {
                "Variables": {
                  "STRIPE_SECRET_KEY": "sk_test_d2r0vZbC6E2GYSdKfXYKtuat",
                  "TWILIO_ACCOUNT_SID": "AC63722298f74133d875a71ed1fe580349",
                  "TWILIO_AUTH_TOKEN": "030133ea981d5429de71488f9aef85e1",
                  "VERIFICATION_SID": "VAe65a81204367120c0cb0eb67d0fff7a3",
                  "FROM_EMAIL": "kumarkvm070@gmail.com",
                  "TO_EMAIL": "onlinesastry.test@gmail.com"
                }
              }
            },
            "DependsOn": [
              "GetFaqLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "GetFaqLambdaVersionyVMMU1wFV6TyuFRfarU0BAquufjrgmwURZyUPrquAO0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetFaqLambdaFunction"
              },
              "CodeSha256": "b552vmh25DrFA8c7xwuHtKSyAY7UrckKcD/CHI24eN8="
            }
          },
          "GetAllFaqsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/vinay-online-sastry/dev/1588863487604-2020-05-07T14:58:07.604Z/vinay-online-sastry.zip"
              },
              "FunctionName": "vinay-online-sastry-dev-getAllFaqs",
              "Handler": "functions/index.readAllFaqs",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs10.x",
              "Timeout": 20,
              "Environment": {
                "Variables": {
                  "STRIPE_SECRET_KEY": "sk_test_d2r0vZbC6E2GYSdKfXYKtuat",
                  "TWILIO_ACCOUNT_SID": "AC63722298f74133d875a71ed1fe580349",
                  "TWILIO_AUTH_TOKEN": "030133ea981d5429de71488f9aef85e1",
                  "VERIFICATION_SID": "VAe65a81204367120c0cb0eb67d0fff7a3",
                  "FROM_EMAIL": "kumarkvm070@gmail.com",
                  "TO_EMAIL": "onlinesastry.test@gmail.com"
                }
              }
            },
            "DependsOn": [
              "GetAllFaqsLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "GetAllFaqsLambdaVersionYb79a725GpIMTl4YQdChOBNwqHreDkIltOEfYJj5s": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetAllFaqsLambdaFunction"
              },
              "CodeSha256": "b552vmh25DrFA8c7xwuHtKSyAY7UrckKcD/CHI24eN8="
            }
          },
          "CreateFaqLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/vinay-online-sastry/dev/1588863487604-2020-05-07T14:58:07.604Z/vinay-online-sastry.zip"
              },
              "FunctionName": "vinay-online-sastry-dev-createFaq",
              "Handler": "functions/index.createFaq",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs10.x",
              "Timeout": 20,
              "Environment": {
                "Variables": {
                  "STRIPE_SECRET_KEY": "sk_test_d2r0vZbC6E2GYSdKfXYKtuat",
                  "TWILIO_ACCOUNT_SID": "AC63722298f74133d875a71ed1fe580349",
                  "TWILIO_AUTH_TOKEN": "030133ea981d5429de71488f9aef85e1",
                  "VERIFICATION_SID": "VAe65a81204367120c0cb0eb67d0fff7a3",
                  "FROM_EMAIL": "kumarkvm070@gmail.com",
                  "TO_EMAIL": "onlinesastry.test@gmail.com"
                }
              }
            },
            "DependsOn": [
              "CreateFaqLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "CreateFaqLambdaVersionkVw5Ww2GSjVlfJyGliILgb0ALMFIQds0abRrPJ8cfM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateFaqLambdaFunction"
              },
              "CodeSha256": "b552vmh25DrFA8c7xwuHtKSyAY7UrckKcD/CHI24eN8="
            }
          },
          "UpdateFaqLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/vinay-online-sastry/dev/1588863487604-2020-05-07T14:58:07.604Z/vinay-online-sastry.zip"
              },
              "FunctionName": "vinay-online-sastry-dev-updateFaq",
              "Handler": "functions/index.updateFaq",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs10.x",
              "Timeout": 20,
              "Environment": {
                "Variables": {
                  "STRIPE_SECRET_KEY": "sk_test_d2r0vZbC6E2GYSdKfXYKtuat",
                  "TWILIO_ACCOUNT_SID": "AC63722298f74133d875a71ed1fe580349",
                  "TWILIO_AUTH_TOKEN": "030133ea981d5429de71488f9aef85e1",
                  "VERIFICATION_SID": "VAe65a81204367120c0cb0eb67d0fff7a3",
                  "FROM_EMAIL": "kumarkvm070@gmail.com",
                  "TO_EMAIL": "onlinesastry.test@gmail.com"
                }
              }
            },
            "DependsOn": [
              "UpdateFaqLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "UpdateFaqLambdaVersion0oBtQgrYWIvG6rCf6jpgY2XWRcbubcPil5cBduvkhA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateFaqLambdaFunction"
              },
              "CodeSha256": "b552vmh25DrFA8c7xwuHtKSyAY7UrckKcD/CHI24eN8="
            }
          },
          "DeleteFaqLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/vinay-online-sastry/dev/1588863487604-2020-05-07T14:58:07.604Z/vinay-online-sastry.zip"
              },
              "FunctionName": "vinay-online-sastry-dev-deleteFaq",
              "Handler": "functions/index.deleteFaq",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs10.x",
              "Timeout": 20,
              "Environment": {
                "Variables": {
                  "STRIPE_SECRET_KEY": "sk_test_d2r0vZbC6E2GYSdKfXYKtuat",
                  "TWILIO_ACCOUNT_SID": "AC63722298f74133d875a71ed1fe580349",
                  "TWILIO_AUTH_TOKEN": "030133ea981d5429de71488f9aef85e1",
                  "VERIFICATION_SID": "VAe65a81204367120c0cb0eb67d0fff7a3",
                  "FROM_EMAIL": "kumarkvm070@gmail.com",
                  "TO_EMAIL": "onlinesastry.test@gmail.com"
                }
              }
            },
            "DependsOn": [
              "DeleteFaqLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "DeleteFaqLambdaVersionTgNFmoqOxj4XJ5O7eHPy48HZxoqgH4gOhxVwqTTRw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteFaqLambdaFunction"
              },
              "CodeSha256": "b552vmh25DrFA8c7xwuHtKSyAY7UrckKcD/CHI24eN8="
            }
          },
          "CreateBookingLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/vinay-online-sastry/dev/1588863487604-2020-05-07T14:58:07.604Z/vinay-online-sastry.zip"
              },
              "FunctionName": "vinay-online-sastry-dev-createBooking",
              "Handler": "functions/index.createBooking",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs10.x",
              "Timeout": 20,
              "Environment": {
                "Variables": {
                  "STRIPE_SECRET_KEY": "sk_test_d2r0vZbC6E2GYSdKfXYKtuat",
                  "TWILIO_ACCOUNT_SID": "AC63722298f74133d875a71ed1fe580349",
                  "TWILIO_AUTH_TOKEN": "030133ea981d5429de71488f9aef85e1",
                  "VERIFICATION_SID": "VAe65a81204367120c0cb0eb67d0fff7a3",
                  "FROM_EMAIL": "kumarkvm070@gmail.com",
                  "TO_EMAIL": "onlinesastry.test@gmail.com"
                }
              }
            },
            "DependsOn": [
              "CreateBookingLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "CreateBookingLambdaVersionB60OuP8tDoif1J6rZ7LYbylanUfcRkef3xte7evFGA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateBookingLambdaFunction"
              },
              "CodeSha256": "b552vmh25DrFA8c7xwuHtKSyAY7UrckKcD/CHI24eN8="
            }
          },
          "GetAllBookingsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/vinay-online-sastry/dev/1588863487604-2020-05-07T14:58:07.604Z/vinay-online-sastry.zip"
              },
              "FunctionName": "vinay-online-sastry-dev-getAllBookings",
              "Handler": "functions/index.getAllBookings",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs10.x",
              "Timeout": 20,
              "Environment": {
                "Variables": {
                  "STRIPE_SECRET_KEY": "sk_test_d2r0vZbC6E2GYSdKfXYKtuat",
                  "TWILIO_ACCOUNT_SID": "AC63722298f74133d875a71ed1fe580349",
                  "TWILIO_AUTH_TOKEN": "030133ea981d5429de71488f9aef85e1",
                  "VERIFICATION_SID": "VAe65a81204367120c0cb0eb67d0fff7a3",
                  "FROM_EMAIL": "kumarkvm070@gmail.com",
                  "TO_EMAIL": "onlinesastry.test@gmail.com"
                }
              }
            },
            "DependsOn": [
              "GetAllBookingsLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "GetAllBookingsLambdaVersion73c4V940W1EgrssHMOvBO37x3qsXdWftdAbiyMIKTw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetAllBookingsLambdaFunction"
              },
              "CodeSha256": "b552vmh25DrFA8c7xwuHtKSyAY7UrckKcD/CHI24eN8="
            }
          },
          "GetBookingsByPhoneNumberLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/vinay-online-sastry/dev/1588863487604-2020-05-07T14:58:07.604Z/vinay-online-sastry.zip"
              },
              "FunctionName": "vinay-online-sastry-dev-getBookingsByPhoneNumber",
              "Handler": "functions/index.getBookingsByPhoneNumber",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs10.x",
              "Timeout": 20,
              "Environment": {
                "Variables": {
                  "STRIPE_SECRET_KEY": "sk_test_d2r0vZbC6E2GYSdKfXYKtuat",
                  "TWILIO_ACCOUNT_SID": "AC63722298f74133d875a71ed1fe580349",
                  "TWILIO_AUTH_TOKEN": "030133ea981d5429de71488f9aef85e1",
                  "VERIFICATION_SID": "VAe65a81204367120c0cb0eb67d0fff7a3",
                  "FROM_EMAIL": "kumarkvm070@gmail.com",
                  "TO_EMAIL": "onlinesastry.test@gmail.com"
                }
              }
            },
            "DependsOn": [
              "GetBookingsByPhoneNumberLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "GetBookingsByPhoneNumberLambdaVersionGev0HFPCcIkvjZ4Din3doG2wsyl1yMTmeIooTAWhKs": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetBookingsByPhoneNumberLambdaFunction"
              },
              "CodeSha256": "b552vmh25DrFA8c7xwuHtKSyAY7UrckKcD/CHI24eN8="
            }
          },
          "DeleteBookingLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/vinay-online-sastry/dev/1588863487604-2020-05-07T14:58:07.604Z/vinay-online-sastry.zip"
              },
              "FunctionName": "vinay-online-sastry-dev-deleteBooking",
              "Handler": "functions/index.deleteBooking",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs10.x",
              "Timeout": 20,
              "Environment": {
                "Variables": {
                  "STRIPE_SECRET_KEY": "sk_test_d2r0vZbC6E2GYSdKfXYKtuat",
                  "TWILIO_ACCOUNT_SID": "AC63722298f74133d875a71ed1fe580349",
                  "TWILIO_AUTH_TOKEN": "030133ea981d5429de71488f9aef85e1",
                  "VERIFICATION_SID": "VAe65a81204367120c0cb0eb67d0fff7a3",
                  "FROM_EMAIL": "kumarkvm070@gmail.com",
                  "TO_EMAIL": "onlinesastry.test@gmail.com"
                }
              }
            },
            "DependsOn": [
              "DeleteBookingLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "DeleteBookingLambdaVersionTCdXvktO9wxiAPyeeVnKCNqDZmYbPoFcfolUeBy72RM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteBookingLambdaFunction"
              },
              "CodeSha256": "b552vmh25DrFA8c7xwuHtKSyAY7UrckKcD/CHI24eN8="
            }
          },
          "SearchPujaLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/vinay-online-sastry/dev/1588863487604-2020-05-07T14:58:07.604Z/vinay-online-sastry.zip"
              },
              "FunctionName": "vinay-online-sastry-dev-searchPuja",
              "Handler": "functions/index.searchPuja",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs10.x",
              "Timeout": 20,
              "Environment": {
                "Variables": {
                  "STRIPE_SECRET_KEY": "sk_test_d2r0vZbC6E2GYSdKfXYKtuat",
                  "TWILIO_ACCOUNT_SID": "AC63722298f74133d875a71ed1fe580349",
                  "TWILIO_AUTH_TOKEN": "030133ea981d5429de71488f9aef85e1",
                  "VERIFICATION_SID": "VAe65a81204367120c0cb0eb67d0fff7a3",
                  "FROM_EMAIL": "kumarkvm070@gmail.com",
                  "TO_EMAIL": "onlinesastry.test@gmail.com"
                }
              }
            },
            "DependsOn": [
              "SearchPujaLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "SearchPujaLambdaVersioncOStIANXNfZ9x235TV8ruRCiKH1VdJ9tsfIRIiTqPs": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SearchPujaLambdaFunction"
              },
              "CodeSha256": "b552vmh25DrFA8c7xwuHtKSyAY7UrckKcD/CHI24eN8="
            }
          },
          "GetLanguagesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/vinay-online-sastry/dev/1588863487604-2020-05-07T14:58:07.604Z/vinay-online-sastry.zip"
              },
              "FunctionName": "vinay-online-sastry-dev-getLanguages",
              "Handler": "functions/index.getLanguages",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs10.x",
              "Timeout": 20,
              "Environment": {
                "Variables": {
                  "STRIPE_SECRET_KEY": "sk_test_d2r0vZbC6E2GYSdKfXYKtuat",
                  "TWILIO_ACCOUNT_SID": "AC63722298f74133d875a71ed1fe580349",
                  "TWILIO_AUTH_TOKEN": "030133ea981d5429de71488f9aef85e1",
                  "VERIFICATION_SID": "VAe65a81204367120c0cb0eb67d0fff7a3",
                  "FROM_EMAIL": "kumarkvm070@gmail.com",
                  "TO_EMAIL": "onlinesastry.test@gmail.com"
                }
              }
            },
            "DependsOn": [
              "GetLanguagesLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "GetLanguagesLambdaVersiony4E7tQs7Ilh60d6zgJSblPpGQKrw30tNlTaDN4xNjlY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetLanguagesLambdaFunction"
              },
              "CodeSha256": "b552vmh25DrFA8c7xwuHtKSyAY7UrckKcD/CHI24eN8="
            }
          },
          "SendOTPLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/vinay-online-sastry/dev/1588863487604-2020-05-07T14:58:07.604Z/vinay-online-sastry.zip"
              },
              "FunctionName": "vinay-online-sastry-dev-sendOTP",
              "Handler": "functions/index.generateOTP",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs10.x",
              "Timeout": 20,
              "Environment": {
                "Variables": {
                  "STRIPE_SECRET_KEY": "sk_test_d2r0vZbC6E2GYSdKfXYKtuat",
                  "TWILIO_ACCOUNT_SID": "AC63722298f74133d875a71ed1fe580349",
                  "TWILIO_AUTH_TOKEN": "030133ea981d5429de71488f9aef85e1",
                  "VERIFICATION_SID": "VAe65a81204367120c0cb0eb67d0fff7a3",
                  "FROM_EMAIL": "kumarkvm070@gmail.com",
                  "TO_EMAIL": "onlinesastry.test@gmail.com"
                }
              }
            },
            "DependsOn": [
              "SendOTPLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "SendOTPLambdaVersionDCoNe8Vgq6l52ZDECpe8a48qwWnHAiSGZlK9kO3x8M": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SendOTPLambdaFunction"
              },
              "CodeSha256": "b552vmh25DrFA8c7xwuHtKSyAY7UrckKcD/CHI24eN8="
            }
          },
          "VerifyOtpLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/vinay-online-sastry/dev/1588863487604-2020-05-07T14:58:07.604Z/vinay-online-sastry.zip"
              },
              "FunctionName": "vinay-online-sastry-dev-verifyOtp",
              "Handler": "functions/index.verifyOtp",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs10.x",
              "Timeout": 20,
              "Environment": {
                "Variables": {
                  "STRIPE_SECRET_KEY": "sk_test_d2r0vZbC6E2GYSdKfXYKtuat",
                  "TWILIO_ACCOUNT_SID": "AC63722298f74133d875a71ed1fe580349",
                  "TWILIO_AUTH_TOKEN": "030133ea981d5429de71488f9aef85e1",
                  "VERIFICATION_SID": "VAe65a81204367120c0cb0eb67d0fff7a3",
                  "FROM_EMAIL": "kumarkvm070@gmail.com",
                  "TO_EMAIL": "onlinesastry.test@gmail.com"
                }
              }
            },
            "DependsOn": [
              "VerifyOtpLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "VerifyOtpLambdaVersion0HzARATY0hgH0gTrGtrs5O1IhmIriDDUKgjYvJGrXxY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "VerifyOtpLambdaFunction"
              },
              "CodeSha256": "b552vmh25DrFA8c7xwuHtKSyAY7UrckKcD/CHI24eN8="
            }
          },
          "CreateAppSettingsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/vinay-online-sastry/dev/1588863487604-2020-05-07T14:58:07.604Z/vinay-online-sastry.zip"
              },
              "FunctionName": "vinay-online-sastry-dev-createAppSettings",
              "Handler": "functions/index.createAppSettings",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs10.x",
              "Timeout": 20,
              "Environment": {
                "Variables": {
                  "STRIPE_SECRET_KEY": "sk_test_d2r0vZbC6E2GYSdKfXYKtuat",
                  "TWILIO_ACCOUNT_SID": "AC63722298f74133d875a71ed1fe580349",
                  "TWILIO_AUTH_TOKEN": "030133ea981d5429de71488f9aef85e1",
                  "VERIFICATION_SID": "VAe65a81204367120c0cb0eb67d0fff7a3",
                  "FROM_EMAIL": "kumarkvm070@gmail.com",
                  "TO_EMAIL": "onlinesastry.test@gmail.com"
                }
              }
            },
            "DependsOn": [
              "CreateAppSettingsLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "CreateAppSettingsLambdaVersion86C2DyHxdDQzd211zmv8SSgQOexnz3oKV1pO30TEHGk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateAppSettingsLambdaFunction"
              },
              "CodeSha256": "b552vmh25DrFA8c7xwuHtKSyAY7UrckKcD/CHI24eN8="
            }
          },
          "CancelBookingLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/vinay-online-sastry/dev/1588863487604-2020-05-07T14:58:07.604Z/vinay-online-sastry.zip"
              },
              "FunctionName": "vinay-online-sastry-dev-cancelBooking",
              "Handler": "functions/index.cancelBooking",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs10.x",
              "Timeout": 20,
              "Environment": {
                "Variables": {
                  "STRIPE_SECRET_KEY": "sk_test_d2r0vZbC6E2GYSdKfXYKtuat",
                  "TWILIO_ACCOUNT_SID": "AC63722298f74133d875a71ed1fe580349",
                  "TWILIO_AUTH_TOKEN": "030133ea981d5429de71488f9aef85e1",
                  "VERIFICATION_SID": "VAe65a81204367120c0cb0eb67d0fff7a3",
                  "FROM_EMAIL": "kumarkvm070@gmail.com",
                  "TO_EMAIL": "onlinesastry.test@gmail.com"
                }
              }
            },
            "DependsOn": [
              "CancelBookingLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "CancelBookingLambdaVersionQyGxbXqKOYv8CMesO4BUAQpMfEUAy1NJSH91FvGXoE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CancelBookingLambdaFunction"
              },
              "CodeSha256": "b552vmh25DrFA8c7xwuHtKSyAY7UrckKcD/CHI24eN8="
            }
          },
          "RescheduleLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/vinay-online-sastry/dev/1588863487604-2020-05-07T14:58:07.604Z/vinay-online-sastry.zip"
              },
              "FunctionName": "vinay-online-sastry-dev-reschedule",
              "Handler": "functions/index.reschedule",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs10.x",
              "Timeout": 20,
              "Environment": {
                "Variables": {
                  "STRIPE_SECRET_KEY": "sk_test_d2r0vZbC6E2GYSdKfXYKtuat",
                  "TWILIO_ACCOUNT_SID": "AC63722298f74133d875a71ed1fe580349",
                  "TWILIO_AUTH_TOKEN": "030133ea981d5429de71488f9aef85e1",
                  "VERIFICATION_SID": "VAe65a81204367120c0cb0eb67d0fff7a3",
                  "FROM_EMAIL": "kumarkvm070@gmail.com",
                  "TO_EMAIL": "onlinesastry.test@gmail.com"
                }
              }
            },
            "DependsOn": [
              "RescheduleLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "RescheduleLambdaVersionLZfbVv920Vo5BGA4pCH5D3g7qB8YRfKvIZTHt67F6w": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "RescheduleLambdaFunction"
              },
              "CodeSha256": "b552vmh25DrFA8c7xwuHtKSyAY7UrckKcD/CHI24eN8="
            }
          },
          "GetAllAppSettingsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/vinay-online-sastry/dev/1588863487604-2020-05-07T14:58:07.604Z/vinay-online-sastry.zip"
              },
              "FunctionName": "vinay-online-sastry-dev-getAllAppSettings",
              "Handler": "functions/index.getAllAppSettings",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs10.x",
              "Timeout": 20,
              "Environment": {
                "Variables": {
                  "STRIPE_SECRET_KEY": "sk_test_d2r0vZbC6E2GYSdKfXYKtuat",
                  "TWILIO_ACCOUNT_SID": "AC63722298f74133d875a71ed1fe580349",
                  "TWILIO_AUTH_TOKEN": "030133ea981d5429de71488f9aef85e1",
                  "VERIFICATION_SID": "VAe65a81204367120c0cb0eb67d0fff7a3",
                  "FROM_EMAIL": "kumarkvm070@gmail.com",
                  "TO_EMAIL": "onlinesastry.test@gmail.com"
                }
              }
            },
            "DependsOn": [
              "GetAllAppSettingsLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "GetAllAppSettingsLambdaVersionLzyAWxI0P0zdbl9RtXxvCXBDc1jDEl4QOHoyIuTmc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetAllAppSettingsLambdaFunction"
              },
              "CodeSha256": "b552vmh25DrFA8c7xwuHtKSyAY7UrckKcD/CHI24eN8="
            }
          },
          "UpdateAppSettingsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/vinay-online-sastry/dev/1588863487604-2020-05-07T14:58:07.604Z/vinay-online-sastry.zip"
              },
              "FunctionName": "vinay-online-sastry-dev-updateAppSettings",
              "Handler": "functions/index.updateAppSettings",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs10.x",
              "Timeout": 20,
              "Environment": {
                "Variables": {
                  "STRIPE_SECRET_KEY": "sk_test_d2r0vZbC6E2GYSdKfXYKtuat",
                  "TWILIO_ACCOUNT_SID": "AC63722298f74133d875a71ed1fe580349",
                  "TWILIO_AUTH_TOKEN": "030133ea981d5429de71488f9aef85e1",
                  "VERIFICATION_SID": "VAe65a81204367120c0cb0eb67d0fff7a3",
                  "FROM_EMAIL": "kumarkvm070@gmail.com",
                  "TO_EMAIL": "onlinesastry.test@gmail.com"
                }
              }
            },
            "DependsOn": [
              "UpdateAppSettingsLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "UpdateAppSettingsLambdaVersiondjkKBU0oAogc8Rh11f8L7jRtwDS4KY6YaTrdmrdopnQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateAppSettingsLambdaFunction"
              },
              "CodeSha256": "b552vmh25DrFA8c7xwuHtKSyAY7UrckKcD/CHI24eN8="
            }
          },
          "DeleteAppSettingsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/vinay-online-sastry/dev/1588863487604-2020-05-07T14:58:07.604Z/vinay-online-sastry.zip"
              },
              "FunctionName": "vinay-online-sastry-dev-deleteAppSettings",
              "Handler": "functions/index.deleteAppSettings",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs10.x",
              "Timeout": 20,
              "Environment": {
                "Variables": {
                  "STRIPE_SECRET_KEY": "sk_test_d2r0vZbC6E2GYSdKfXYKtuat",
                  "TWILIO_ACCOUNT_SID": "AC63722298f74133d875a71ed1fe580349",
                  "TWILIO_AUTH_TOKEN": "030133ea981d5429de71488f9aef85e1",
                  "VERIFICATION_SID": "VAe65a81204367120c0cb0eb67d0fff7a3",
                  "FROM_EMAIL": "kumarkvm070@gmail.com",
                  "TO_EMAIL": "onlinesastry.test@gmail.com"
                }
              }
            },
            "DependsOn": [
              "DeleteAppSettingsLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "DeleteAppSettingsLambdaVersionzrAf6KcwulHFV9Ah7aHVGjPlg6bC460vHDhjF5eE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteAppSettingsLambdaFunction"
              },
              "CodeSha256": "b552vmh25DrFA8c7xwuHtKSyAY7UrckKcD/CHI24eN8="
            }
          },
          "GetAppSettingsValueByKeyLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/vinay-online-sastry/dev/1588863487604-2020-05-07T14:58:07.604Z/vinay-online-sastry.zip"
              },
              "FunctionName": "vinay-online-sastry-dev-getAppSettingsValueByKey",
              "Handler": "functions/index.getAppSettingsValueByKey",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs10.x",
              "Timeout": 20,
              "Environment": {
                "Variables": {
                  "STRIPE_SECRET_KEY": "sk_test_d2r0vZbC6E2GYSdKfXYKtuat",
                  "TWILIO_ACCOUNT_SID": "AC63722298f74133d875a71ed1fe580349",
                  "TWILIO_AUTH_TOKEN": "030133ea981d5429de71488f9aef85e1",
                  "VERIFICATION_SID": "VAe65a81204367120c0cb0eb67d0fff7a3",
                  "FROM_EMAIL": "kumarkvm070@gmail.com",
                  "TO_EMAIL": "onlinesastry.test@gmail.com"
                }
              }
            },
            "DependsOn": [
              "GetAppSettingsValueByKeyLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "GetAppSettingsValueByKeyLambdaVersionFAqVkytgCqWPuVX0My6sLK4DwljkPn2h8DoB6JyuA4M": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetAppSettingsValueByKeyLambdaFunction"
              },
              "CodeSha256": "b552vmh25DrFA8c7xwuHtKSyAY7UrckKcD/CHI24eN8="
            }
          },
          "SendEmailLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/vinay-online-sastry/dev/1588863487604-2020-05-07T14:58:07.604Z/vinay-online-sastry.zip"
              },
              "FunctionName": "vinay-online-sastry-dev-sendEmail",
              "Handler": "functions/index.sendEmail",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs10.x",
              "Timeout": 20,
              "Environment": {
                "Variables": {
                  "STRIPE_SECRET_KEY": "sk_test_d2r0vZbC6E2GYSdKfXYKtuat",
                  "TWILIO_ACCOUNT_SID": "AC63722298f74133d875a71ed1fe580349",
                  "TWILIO_AUTH_TOKEN": "030133ea981d5429de71488f9aef85e1",
                  "VERIFICATION_SID": "VAe65a81204367120c0cb0eb67d0fff7a3",
                  "FROM_EMAIL": "kumarkvm070@gmail.com",
                  "TO_EMAIL": "onlinesastry.test@gmail.com"
                }
              }
            },
            "DependsOn": [
              "SendEmailLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "SendEmailLambdaVersionoJdMzaAA7OCobAeP9Q4WjAdXI5zD0hYLS9y9Im1O0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SendEmailLambdaFunction"
              },
              "CodeSha256": "b552vmh25DrFA8c7xwuHtKSyAY7UrckKcD/CHI24eN8="
            }
          },
          "GetAllPujarisLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/vinay-online-sastry/dev/1588863487604-2020-05-07T14:58:07.604Z/vinay-online-sastry.zip"
              },
              "FunctionName": "vinay-online-sastry-dev-getAllPujaris",
              "Handler": "functions/index.getAllPujaris",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs10.x",
              "Timeout": 20,
              "Environment": {
                "Variables": {
                  "STRIPE_SECRET_KEY": "sk_test_d2r0vZbC6E2GYSdKfXYKtuat",
                  "TWILIO_ACCOUNT_SID": "AC63722298f74133d875a71ed1fe580349",
                  "TWILIO_AUTH_TOKEN": "030133ea981d5429de71488f9aef85e1",
                  "VERIFICATION_SID": "VAe65a81204367120c0cb0eb67d0fff7a3",
                  "FROM_EMAIL": "kumarkvm070@gmail.com",
                  "TO_EMAIL": "onlinesastry.test@gmail.com"
                }
              }
            },
            "DependsOn": [
              "GetAllPujarisLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "GetAllPujarisLambdaVersionI08bFQPYIW7RpcJHNxMWjQtq6BZCtBUONXeyWD7HLwU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetAllPujarisLambdaFunction"
              },
              "CodeSha256": "b552vmh25DrFA8c7xwuHtKSyAY7UrckKcD/CHI24eN8="
            }
          },
          "CreatePujariLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/vinay-online-sastry/dev/1588863487604-2020-05-07T14:58:07.604Z/vinay-online-sastry.zip"
              },
              "FunctionName": "vinay-online-sastry-dev-createPujari",
              "Handler": "functions/index.createPujari",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs10.x",
              "Timeout": 20,
              "Environment": {
                "Variables": {
                  "STRIPE_SECRET_KEY": "sk_test_d2r0vZbC6E2GYSdKfXYKtuat",
                  "TWILIO_ACCOUNT_SID": "AC63722298f74133d875a71ed1fe580349",
                  "TWILIO_AUTH_TOKEN": "030133ea981d5429de71488f9aef85e1",
                  "VERIFICATION_SID": "VAe65a81204367120c0cb0eb67d0fff7a3",
                  "FROM_EMAIL": "kumarkvm070@gmail.com",
                  "TO_EMAIL": "onlinesastry.test@gmail.com"
                }
              }
            },
            "DependsOn": [
              "CreatePujariLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "CreatePujariLambdaVersionAomMQYfjMFsOeJGkkkqZiMhfcOJxqZefzEJ3t8qDU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreatePujariLambdaFunction"
              },
              "CodeSha256": "b552vmh25DrFA8c7xwuHtKSyAY7UrckKcD/CHI24eN8="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-vinay-online-sastry",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourcePujas": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "pujas",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourcePujasIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourcePujas"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourcePayment": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "payment",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceFaqs": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "faqs",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceFaqsIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceFaqs"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceBookings": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "bookings",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceBookingsIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceBookings"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceBookingsCancel": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceBookings"
              },
              "PathPart": "cancel",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceBookingsCancelIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceBookingsCancel"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceSearchpuja": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "searchPuja",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceLanguages": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "languages",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceVeify": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "veify",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceVeifyNumberVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceVeify"
              },
              "PathPart": "{number}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAppsettings": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "appSettings",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAppsettingsIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceAppsettings"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceSendemail": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "sendEmail",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourcePujaris": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "pujaris",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodPujasOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PATCH,POST,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourcePujas"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodPujasIdVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourcePujasIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodPaymentOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourcePayment"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodFaqsIdVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceFaqsIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodFaqsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PATCH,POST,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceFaqs"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodBookingsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PATCH,GET,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceBookings"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodBookingsIdVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceBookingsIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodSearchpujaOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceSearchpuja"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodLanguagesOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceLanguages"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodVeifyNumberVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceVeifyNumberVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodVeifyOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceVeify"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAppsettingsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PATCH,GET,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAppsettings"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodBookingsCancelIdVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceBookingsCancelIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAppsettingsIdVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,DELETE'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAppsettingsIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodSendemailOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceSendemail"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodPujarisOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourcePujaris"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodPujasGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourcePujas"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetAllPujasLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodPujasIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourcePujasIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetPujaLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodPaymentGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourcePayment"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateCustomerLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodPaymentPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourcePayment"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "PaymentLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodPujasPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourcePujas"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreatePujaLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodPujasPatch": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PATCH",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourcePujas"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdatePujaLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodPujasIdVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourcePujasIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeletePujaLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodFaqsIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceFaqsIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetFaqLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodFaqsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceFaqs"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetAllFaqsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodFaqsPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceFaqs"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateFaqLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodFaqsPatch": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PATCH",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceFaqs"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateFaqLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodFaqsIdVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceFaqsIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeleteFaqLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodBookingsPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceBookings"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateBookingLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodBookingsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceBookings"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetAllBookingsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodBookingsIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceBookingsIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetBookingsByPhoneNumberLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodBookingsIdVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceBookingsIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeleteBookingLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodSearchpujaGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceSearchpuja"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "SearchPujaLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodLanguagesGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceLanguages"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetLanguagesLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodVeifyNumberVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceVeifyNumberVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "SendOTPLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodVeifyPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceVeify"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "VerifyOtpLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodAppsettingsPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAppsettings"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateAppSettingsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodBookingsCancelIdVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceBookingsCancelIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CancelBookingLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodBookingsPatch": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PATCH",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceBookings"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "RescheduleLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodAppsettingsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAppsettings"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetAllAppSettingsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodAppsettingsPatch": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PATCH",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAppsettings"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateAppSettingsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodAppsettingsIdVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAppsettingsIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeleteAppSettingsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodAppsettingsIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAppsettingsIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetAppSettingsValueByKeyLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodSendemailGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceSendemail"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "SendEmailLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodPujarisGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourcePujaris"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetAllPujarisLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodPujarisPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourcePujaris"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreatePujariLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayDeployment1588863420625": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodPujasOptions",
              "ApiGatewayMethodPujasIdVarOptions",
              "ApiGatewayMethodPaymentOptions",
              "ApiGatewayMethodFaqsIdVarOptions",
              "ApiGatewayMethodFaqsOptions",
              "ApiGatewayMethodBookingsOptions",
              "ApiGatewayMethodBookingsIdVarOptions",
              "ApiGatewayMethodSearchpujaOptions",
              "ApiGatewayMethodLanguagesOptions",
              "ApiGatewayMethodVeifyNumberVarOptions",
              "ApiGatewayMethodVeifyOptions",
              "ApiGatewayMethodAppsettingsOptions",
              "ApiGatewayMethodBookingsCancelIdVarOptions",
              "ApiGatewayMethodAppsettingsIdVarOptions",
              "ApiGatewayMethodSendemailOptions",
              "ApiGatewayMethodPujarisOptions",
              "ApiGatewayMethodPujasGet",
              "ApiGatewayMethodPujasIdVarGet",
              "ApiGatewayMethodPaymentGet",
              "ApiGatewayMethodPaymentPost",
              "ApiGatewayMethodPujasPost",
              "ApiGatewayMethodPujasPatch",
              "ApiGatewayMethodPujasIdVarDelete",
              "ApiGatewayMethodFaqsIdVarGet",
              "ApiGatewayMethodFaqsGet",
              "ApiGatewayMethodFaqsPost",
              "ApiGatewayMethodFaqsPatch",
              "ApiGatewayMethodFaqsIdVarDelete",
              "ApiGatewayMethodBookingsPost",
              "ApiGatewayMethodBookingsGet",
              "ApiGatewayMethodBookingsIdVarGet",
              "ApiGatewayMethodBookingsIdVarDelete",
              "ApiGatewayMethodSearchpujaGet",
              "ApiGatewayMethodLanguagesGet",
              "ApiGatewayMethodVeifyNumberVarGet",
              "ApiGatewayMethodVeifyPost",
              "ApiGatewayMethodAppsettingsPost",
              "ApiGatewayMethodBookingsCancelIdVarPut",
              "ApiGatewayMethodBookingsPatch",
              "ApiGatewayMethodAppsettingsGet",
              "ApiGatewayMethodAppsettingsPatch",
              "ApiGatewayMethodAppsettingsIdVarDelete",
              "ApiGatewayMethodAppsettingsIdVarGet",
              "ApiGatewayMethodSendemailGet",
              "ApiGatewayMethodPujarisGet",
              "ApiGatewayMethodPujarisPost"
            ]
          },
          "GetAllPujasLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetAllPujasLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetPujaLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetPujaLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateCustomerLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateCustomerLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "PaymentLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "PaymentLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreatePujaLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreatePujaLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdatePujaLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdatePujaLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeletePujaLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeletePujaLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetFaqLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetFaqLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetAllFaqsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetAllFaqsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateFaqLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateFaqLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateFaqLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateFaqLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeleteFaqLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteFaqLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateBookingLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateBookingLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetAllBookingsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetAllBookingsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetBookingsByPhoneNumberLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetBookingsByPhoneNumberLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeleteBookingLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteBookingLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "SearchPujaLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SearchPujaLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetLanguagesLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetLanguagesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "SendOTPLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SendOTPLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "VerifyOtpLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "VerifyOtpLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateAppSettingsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateAppSettingsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CancelBookingLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CancelBookingLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "RescheduleLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "RescheduleLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetAllAppSettingsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetAllAppSettingsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateAppSettingsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateAppSettingsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeleteAppSettingsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteAppSettingsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetAppSettingsValueByKeyLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetAppSettingsValueByKeyLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "SendEmailLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SendEmailLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetAllPujarisLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetAllPujarisLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreatePujariLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreatePujariLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          },
          "HelloLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "HelloLambdaVersionuXKCTWMvzVdGGZMJYjoE8AsdRh2Hn3TkqJB3oeFEAU"
            }
          },
          "GetAllPujasLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetAllPujasLambdaVersionpaIPwFKBksVXLqNBvdgdxFaIK4ec3gSyvbszlXI3dEY"
            }
          },
          "GetPujaLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetPujaLambdaVersionCl1Mc2Bc4tc0bcK65UZbrHdryukBxs13VAnZJa0iO0"
            }
          },
          "CreateCustomerLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateCustomerLambdaVersionVXeMxIqobmptyh0aBiH7JFye3ue0zdllefn53kXkpM"
            }
          },
          "PaymentLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "PaymentLambdaVersionnGmnseNqS4XwktJcOdBOVXovR12yD8MpPMZWtYm4"
            }
          },
          "CreatePujaLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreatePujaLambdaVersionFVt7ncpHx119FTPsMK1mxTQCqTmofx9JdrGckncedy4"
            }
          },
          "UpdatePujaLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdatePujaLambdaVersioncm8t7ddls368TPoWNdiKR9TjiRSTCkkKmbtGloPj58"
            }
          },
          "DeletePujaLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeletePujaLambdaVersionTX7bpHxlfY8IhlpAyMrTroJtx2PWMG6e9MrpPg4BCPE"
            }
          },
          "GetFaqLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetFaqLambdaVersionyVMMU1wFV6TyuFRfarU0BAquufjrgmwURZyUPrquAO0"
            }
          },
          "GetAllFaqsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetAllFaqsLambdaVersionYb79a725GpIMTl4YQdChOBNwqHreDkIltOEfYJj5s"
            }
          },
          "CreateFaqLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateFaqLambdaVersionkVw5Ww2GSjVlfJyGliILgb0ALMFIQds0abRrPJ8cfM"
            }
          },
          "UpdateFaqLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateFaqLambdaVersion0oBtQgrYWIvG6rCf6jpgY2XWRcbubcPil5cBduvkhA"
            }
          },
          "DeleteFaqLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteFaqLambdaVersionTgNFmoqOxj4XJ5O7eHPy48HZxoqgH4gOhxVwqTTRw"
            }
          },
          "CreateBookingLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateBookingLambdaVersionB60OuP8tDoif1J6rZ7LYbylanUfcRkef3xte7evFGA"
            }
          },
          "GetAllBookingsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetAllBookingsLambdaVersion73c4V940W1EgrssHMOvBO37x3qsXdWftdAbiyMIKTw"
            }
          },
          "GetBookingsByPhoneNumberLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetBookingsByPhoneNumberLambdaVersionGev0HFPCcIkvjZ4Din3doG2wsyl1yMTmeIooTAWhKs"
            }
          },
          "DeleteBookingLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteBookingLambdaVersionTCdXvktO9wxiAPyeeVnKCNqDZmYbPoFcfolUeBy72RM"
            }
          },
          "SearchPujaLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SearchPujaLambdaVersioncOStIANXNfZ9x235TV8ruRCiKH1VdJ9tsfIRIiTqPs"
            }
          },
          "GetLanguagesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetLanguagesLambdaVersiony4E7tQs7Ilh60d6zgJSblPpGQKrw30tNlTaDN4xNjlY"
            }
          },
          "SendOTPLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SendOTPLambdaVersionDCoNe8Vgq6l52ZDECpe8a48qwWnHAiSGZlK9kO3x8M"
            }
          },
          "VerifyOtpLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "VerifyOtpLambdaVersion0HzARATY0hgH0gTrGtrs5O1IhmIriDDUKgjYvJGrXxY"
            }
          },
          "CreateAppSettingsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateAppSettingsLambdaVersion86C2DyHxdDQzd211zmv8SSgQOexnz3oKV1pO30TEHGk"
            }
          },
          "CancelBookingLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CancelBookingLambdaVersionQyGxbXqKOYv8CMesO4BUAQpMfEUAy1NJSH91FvGXoE"
            }
          },
          "RescheduleLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "RescheduleLambdaVersionLZfbVv920Vo5BGA4pCH5D3g7qB8YRfKvIZTHt67F6w"
            }
          },
          "GetAllAppSettingsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetAllAppSettingsLambdaVersionLzyAWxI0P0zdbl9RtXxvCXBDc1jDEl4QOHoyIuTmc"
            }
          },
          "UpdateAppSettingsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateAppSettingsLambdaVersiondjkKBU0oAogc8Rh11f8L7jRtwDS4KY6YaTrdmrdopnQ"
            }
          },
          "DeleteAppSettingsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteAppSettingsLambdaVersionzrAf6KcwulHFV9Ah7aHVGjPlg6bC460vHDhjF5eE"
            }
          },
          "GetAppSettingsValueByKeyLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetAppSettingsValueByKeyLambdaVersionFAqVkytgCqWPuVX0My6sLK4DwljkPn2h8DoB6JyuA4M"
            }
          },
          "SendEmailLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SendEmailLambdaVersionoJdMzaAA7OCobAeP9Q4WjAdXI5zD0hYLS9y9Im1O0"
            }
          },
          "GetAllPujarisLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetAllPujarisLambdaVersionI08bFQPYIW7RpcJHNxMWjQtq6BZCtBUONXeyWD7HLwU"
            }
          },
          "CreatePujariLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreatePujariLambdaVersionAomMQYfjMFsOeJGkkkqZiMhfcOJxqZefzEJ3t8qDU"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "stage": "dev",
      "DB_NAME": "onlinesastry",
      "USERNAME": "master",
      "PASSWORD": "password",
      "VPC_CIDR": 10,
      "MYSQL": {
        "HOST": {
          "Fn::GetAtt": [
            "MySqlRDSInstance",
            "Endpoint.Address"
          ]
        },
        "PORT": {
          "Fn::GetAtt": [
            "MySqlRDSInstance",
            "Endpoint.Port"
          ]
        }
      }
    },
    "plugins": [
      "serverless-dotenv-plugin",
      "serverless-offline"
    ],
    "pluginsData": {},
    "functions": {
      "hello": {
        "handler": "handler.hello",
        "events": [],
        "name": "vinay-online-sastry-dev-hello",
        "package": {},
        "memory": 1024,
        "timeout": 20,
        "runtime": "nodejs10.x",
        "vpc": {},
        "versionLogicalId": "HelloLambdaVersionuXKCTWMvzVdGGZMJYjoE8AsdRh2Hn3TkqJB3oeFEAU"
      },
      "getAllPujas": {
        "handler": "functions/index.readAllPujas",
        "events": [
          {
            "http": {
              "method": "get",
              "path": "pujas",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "vinay-online-sastry-dev-getAllPujas",
        "package": {},
        "memory": 1024,
        "timeout": 20,
        "runtime": "nodejs10.x",
        "vpc": {},
        "versionLogicalId": "GetAllPujasLambdaVersionpaIPwFKBksVXLqNBvdgdxFaIK4ec3gSyvbszlXI3dEY"
      },
      "getPuja": {
        "handler": "functions/index.getPujaById",
        "events": [
          {
            "http": {
              "method": "get",
              "path": "pujas/{id}",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "vinay-online-sastry-dev-getPuja",
        "package": {},
        "memory": 1024,
        "timeout": 20,
        "runtime": "nodejs10.x",
        "vpc": {},
        "versionLogicalId": "GetPujaLambdaVersionCl1Mc2Bc4tc0bcK65UZbrHdryukBxs13VAnZJa0iO0"
      },
      "createCustomer": {
        "handler": "functions/index.createCustomer",
        "events": [
          {
            "http": {
              "method": "get",
              "path": "payment",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "vinay-online-sastry-dev-createCustomer",
        "package": {},
        "memory": 1024,
        "timeout": 20,
        "runtime": "nodejs10.x",
        "vpc": {},
        "versionLogicalId": "CreateCustomerLambdaVersionVXeMxIqobmptyh0aBiH7JFye3ue0zdllefn53kXkpM"
      },
      "payment": {
        "handler": "functions/index.payment",
        "events": [
          {
            "http": {
              "method": "post",
              "path": "payment",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "vinay-online-sastry-dev-payment",
        "package": {},
        "memory": 1024,
        "timeout": 20,
        "runtime": "nodejs10.x",
        "vpc": {},
        "versionLogicalId": "PaymentLambdaVersionnGmnseNqS4XwktJcOdBOVXovR12yD8MpPMZWtYm4"
      },
      "createPuja": {
        "handler": "functions/index.createPuja",
        "events": [
          {
            "http": {
              "method": "post",
              "path": "pujas",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "vinay-online-sastry-dev-createPuja",
        "package": {},
        "memory": 1024,
        "timeout": 20,
        "runtime": "nodejs10.x",
        "vpc": {},
        "versionLogicalId": "CreatePujaLambdaVersionFVt7ncpHx119FTPsMK1mxTQCqTmofx9JdrGckncedy4"
      },
      "updatePuja": {
        "handler": "functions/index.updatePuja",
        "events": [
          {
            "http": {
              "method": "patch",
              "path": "pujas",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PATCH"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "vinay-online-sastry-dev-updatePuja",
        "package": {},
        "memory": 1024,
        "timeout": 20,
        "runtime": "nodejs10.x",
        "vpc": {},
        "versionLogicalId": "UpdatePujaLambdaVersioncm8t7ddls368TPoWNdiKR9TjiRSTCkkKmbtGloPj58"
      },
      "deletePuja": {
        "handler": "functions/index.deletePuja",
        "events": [
          {
            "http": {
              "method": "delete",
              "path": "pujas/{id}",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "DELETE"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "vinay-online-sastry-dev-deletePuja",
        "package": {},
        "memory": 1024,
        "timeout": 20,
        "runtime": "nodejs10.x",
        "vpc": {},
        "versionLogicalId": "DeletePujaLambdaVersionTX7bpHxlfY8IhlpAyMrTroJtx2PWMG6e9MrpPg4BCPE"
      },
      "getFaq": {
        "handler": "functions/index.getFaqById",
        "events": [
          {
            "http": {
              "method": "get",
              "path": "faqs/{id}",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "vinay-online-sastry-dev-getFaq",
        "package": {},
        "memory": 1024,
        "timeout": 20,
        "runtime": "nodejs10.x",
        "vpc": {},
        "versionLogicalId": "GetFaqLambdaVersionyVMMU1wFV6TyuFRfarU0BAquufjrgmwURZyUPrquAO0"
      },
      "getAllFaqs": {
        "handler": "functions/index.readAllFaqs",
        "events": [
          {
            "http": {
              "method": "get",
              "path": "faqs",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "vinay-online-sastry-dev-getAllFaqs",
        "package": {},
        "memory": 1024,
        "timeout": 20,
        "runtime": "nodejs10.x",
        "vpc": {},
        "versionLogicalId": "GetAllFaqsLambdaVersionYb79a725GpIMTl4YQdChOBNwqHreDkIltOEfYJj5s"
      },
      "createFaq": {
        "handler": "functions/index.createFaq",
        "events": [
          {
            "http": {
              "method": "post",
              "path": "faqs",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "vinay-online-sastry-dev-createFaq",
        "package": {},
        "memory": 1024,
        "timeout": 20,
        "runtime": "nodejs10.x",
        "vpc": {},
        "versionLogicalId": "CreateFaqLambdaVersionkVw5Ww2GSjVlfJyGliILgb0ALMFIQds0abRrPJ8cfM"
      },
      "updateFaq": {
        "handler": "functions/index.updateFaq",
        "events": [
          {
            "http": {
              "method": "patch",
              "path": "faqs",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PATCH"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "vinay-online-sastry-dev-updateFaq",
        "package": {},
        "memory": 1024,
        "timeout": 20,
        "runtime": "nodejs10.x",
        "vpc": {},
        "versionLogicalId": "UpdateFaqLambdaVersion0oBtQgrYWIvG6rCf6jpgY2XWRcbubcPil5cBduvkhA"
      },
      "deleteFaq": {
        "handler": "functions/index.deleteFaq",
        "events": [
          {
            "http": {
              "method": "delete",
              "path": "faqs/{id}",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "DELETE"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "vinay-online-sastry-dev-deleteFaq",
        "package": {},
        "memory": 1024,
        "timeout": 20,
        "runtime": "nodejs10.x",
        "vpc": {},
        "versionLogicalId": "DeleteFaqLambdaVersionTgNFmoqOxj4XJ5O7eHPy48HZxoqgH4gOhxVwqTTRw"
      },
      "createBooking": {
        "handler": "functions/index.createBooking",
        "events": [
          {
            "http": {
              "method": "post",
              "path": "bookings",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "vinay-online-sastry-dev-createBooking",
        "package": {},
        "memory": 1024,
        "timeout": 20,
        "runtime": "nodejs10.x",
        "vpc": {},
        "versionLogicalId": "CreateBookingLambdaVersionB60OuP8tDoif1J6rZ7LYbylanUfcRkef3xte7evFGA"
      },
      "getAllBookings": {
        "handler": "functions/index.getAllBookings",
        "events": [
          {
            "http": {
              "method": "get",
              "path": "bookings",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "vinay-online-sastry-dev-getAllBookings",
        "package": {},
        "memory": 1024,
        "timeout": 20,
        "runtime": "nodejs10.x",
        "vpc": {},
        "versionLogicalId": "GetAllBookingsLambdaVersion73c4V940W1EgrssHMOvBO37x3qsXdWftdAbiyMIKTw"
      },
      "getBookingsByPhoneNumber": {
        "handler": "functions/index.getBookingsByPhoneNumber",
        "events": [
          {
            "http": {
              "method": "get",
              "path": "bookings/{id}",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "vinay-online-sastry-dev-getBookingsByPhoneNumber",
        "package": {},
        "memory": 1024,
        "timeout": 20,
        "runtime": "nodejs10.x",
        "vpc": {},
        "versionLogicalId": "GetBookingsByPhoneNumberLambdaVersionGev0HFPCcIkvjZ4Din3doG2wsyl1yMTmeIooTAWhKs"
      },
      "deleteBooking": {
        "handler": "functions/index.deleteBooking",
        "events": [
          {
            "http": {
              "method": "delete",
              "path": "bookings/{id}",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "DELETE"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "vinay-online-sastry-dev-deleteBooking",
        "package": {},
        "memory": 1024,
        "timeout": 20,
        "runtime": "nodejs10.x",
        "vpc": {},
        "versionLogicalId": "DeleteBookingLambdaVersionTCdXvktO9wxiAPyeeVnKCNqDZmYbPoFcfolUeBy72RM"
      },
      "searchPuja": {
        "handler": "functions/index.searchPuja",
        "events": [
          {
            "http": {
              "method": "get",
              "path": "searchPuja",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "vinay-online-sastry-dev-searchPuja",
        "package": {},
        "memory": 1024,
        "timeout": 20,
        "runtime": "nodejs10.x",
        "vpc": {},
        "versionLogicalId": "SearchPujaLambdaVersioncOStIANXNfZ9x235TV8ruRCiKH1VdJ9tsfIRIiTqPs"
      },
      "getLanguages": {
        "handler": "functions/index.getLanguages",
        "events": [
          {
            "http": {
              "method": "get",
              "path": "languages",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "vinay-online-sastry-dev-getLanguages",
        "package": {},
        "memory": 1024,
        "timeout": 20,
        "runtime": "nodejs10.x",
        "vpc": {},
        "versionLogicalId": "GetLanguagesLambdaVersiony4E7tQs7Ilh60d6zgJSblPpGQKrw30tNlTaDN4xNjlY"
      },
      "sendOTP": {
        "handler": "functions/index.generateOTP",
        "events": [
          {
            "http": {
              "method": "get",
              "path": "veify/{number}",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "vinay-online-sastry-dev-sendOTP",
        "package": {},
        "memory": 1024,
        "timeout": 20,
        "runtime": "nodejs10.x",
        "vpc": {},
        "versionLogicalId": "SendOTPLambdaVersionDCoNe8Vgq6l52ZDECpe8a48qwWnHAiSGZlK9kO3x8M"
      },
      "verifyOtp": {
        "handler": "functions/index.verifyOtp",
        "events": [
          {
            "http": {
              "method": "post",
              "path": "veify",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "vinay-online-sastry-dev-verifyOtp",
        "package": {},
        "memory": 1024,
        "timeout": 20,
        "runtime": "nodejs10.x",
        "vpc": {},
        "versionLogicalId": "VerifyOtpLambdaVersion0HzARATY0hgH0gTrGtrs5O1IhmIriDDUKgjYvJGrXxY"
      },
      "createAppSettings": {
        "handler": "functions/index.createAppSettings",
        "events": [
          {
            "http": {
              "method": "post",
              "path": "appSettings",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "vinay-online-sastry-dev-createAppSettings",
        "package": {},
        "memory": 1024,
        "timeout": 20,
        "runtime": "nodejs10.x",
        "vpc": {},
        "versionLogicalId": "CreateAppSettingsLambdaVersion86C2DyHxdDQzd211zmv8SSgQOexnz3oKV1pO30TEHGk"
      },
      "cancelBooking": {
        "handler": "functions/index.cancelBooking",
        "events": [
          {
            "http": {
              "method": "put",
              "path": "bookings/cancel/{id}",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "vinay-online-sastry-dev-cancelBooking",
        "package": {},
        "memory": 1024,
        "timeout": 20,
        "runtime": "nodejs10.x",
        "vpc": {},
        "versionLogicalId": "CancelBookingLambdaVersionQyGxbXqKOYv8CMesO4BUAQpMfEUAy1NJSH91FvGXoE"
      },
      "reschedule": {
        "handler": "functions/index.reschedule",
        "events": [
          {
            "http": {
              "method": "patch",
              "path": "bookings",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PATCH"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "vinay-online-sastry-dev-reschedule",
        "package": {},
        "memory": 1024,
        "timeout": 20,
        "runtime": "nodejs10.x",
        "vpc": {},
        "versionLogicalId": "RescheduleLambdaVersionLZfbVv920Vo5BGA4pCH5D3g7qB8YRfKvIZTHt67F6w"
      },
      "getAllAppSettings": {
        "handler": "functions/index.getAllAppSettings",
        "events": [
          {
            "http": {
              "method": "get",
              "path": "appSettings",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "vinay-online-sastry-dev-getAllAppSettings",
        "package": {},
        "memory": 1024,
        "timeout": 20,
        "runtime": "nodejs10.x",
        "vpc": {},
        "versionLogicalId": "GetAllAppSettingsLambdaVersionLzyAWxI0P0zdbl9RtXxvCXBDc1jDEl4QOHoyIuTmc"
      },
      "updateAppSettings": {
        "handler": "functions/index.updateAppSettings",
        "events": [
          {
            "http": {
              "method": "patch",
              "path": "appSettings",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PATCH"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "vinay-online-sastry-dev-updateAppSettings",
        "package": {},
        "memory": 1024,
        "timeout": 20,
        "runtime": "nodejs10.x",
        "vpc": {},
        "versionLogicalId": "UpdateAppSettingsLambdaVersiondjkKBU0oAogc8Rh11f8L7jRtwDS4KY6YaTrdmrdopnQ"
      },
      "deleteAppSettings": {
        "handler": "functions/index.deleteAppSettings",
        "events": [
          {
            "http": {
              "method": "delete",
              "path": "appSettings/{id}",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "DELETE"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "vinay-online-sastry-dev-deleteAppSettings",
        "package": {},
        "memory": 1024,
        "timeout": 20,
        "runtime": "nodejs10.x",
        "vpc": {},
        "versionLogicalId": "DeleteAppSettingsLambdaVersionzrAf6KcwulHFV9Ah7aHVGjPlg6bC460vHDhjF5eE"
      },
      "getAppSettingsValueByKey": {
        "handler": "functions/index.getAppSettingsValueByKey",
        "events": [
          {
            "http": {
              "method": "get",
              "path": "appSettings/{id}",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "vinay-online-sastry-dev-getAppSettingsValueByKey",
        "package": {},
        "memory": 1024,
        "timeout": 20,
        "runtime": "nodejs10.x",
        "vpc": {},
        "versionLogicalId": "GetAppSettingsValueByKeyLambdaVersionFAqVkytgCqWPuVX0My6sLK4DwljkPn2h8DoB6JyuA4M"
      },
      "sendEmail": {
        "handler": "functions/index.sendEmail",
        "events": [
          {
            "http": {
              "method": "get",
              "path": "sendEmail",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "vinay-online-sastry-dev-sendEmail",
        "package": {},
        "memory": 1024,
        "timeout": 20,
        "runtime": "nodejs10.x",
        "vpc": {},
        "versionLogicalId": "SendEmailLambdaVersionoJdMzaAA7OCobAeP9Q4WjAdXI5zD0hYLS9y9Im1O0"
      },
      "getAllPujaris": {
        "handler": "functions/index.getAllPujaris",
        "events": [
          {
            "http": {
              "method": "get",
              "path": "pujaris",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "vinay-online-sastry-dev-getAllPujaris",
        "package": {},
        "memory": 1024,
        "timeout": 20,
        "runtime": "nodejs10.x",
        "vpc": {},
        "versionLogicalId": "GetAllPujarisLambdaVersionI08bFQPYIW7RpcJHNxMWjQtq6BZCtBUONXeyWD7HLwU"
      },
      "createPujari": {
        "handler": "functions/index.createPujari",
        "events": [
          {
            "http": {
              "method": "post",
              "path": "pujaris",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "vinay-online-sastry-dev-createPujari",
        "package": {},
        "memory": 1024,
        "timeout": 20,
        "runtime": "nodejs10.x",
        "vpc": {},
        "versionLogicalId": "CreatePujariLambdaVersionAomMQYfjMFsOeJGkkkqZiMhfcOJxqZefzEJ3t8qDU"
      }
    },
    "resources": {
      "Resources": {},
      "Outputs": {}
    },
    "serviceFilename": "serverless.yml",
    "app": "geeks4innovations",
    "layers": {},
    "isDashboardMonitoringPreconfigured": false,
    "artifact": "C:\\Vinay\\Projects\\g4i\\nodejs_services\\.serverless\\vinay-online-sastry.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/vinay-online-sastry/dev/1588863487604-2020-05-07T14:58:07.604Z",
    "artifact": "vinay-online-sastry.zip"
  }
}