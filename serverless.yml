

service: sls-online-sastry-g # NOTE: update this with your service name

plugins:
  - serverless-dotenv-plugin
# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs10.x #supports upto node 10 max
  timeout: 20
  stage: dev
  region: us-east-1

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**
environment:
  stripeSecretKey: ${env:STRIPE_SECRET_KEY}



functions:
  hello:
    handler: handler.hello
  getAllPujas:
    handler: functions/index.readAllPujas
    events:
      - http:
          method: get
          path: pujas
          cors: true
  getPuja:
    handler: functions/index.getPujaById
    events:
      - http:
          method: get
          path: pujas/{id}
          cors: true
  createCustomer:
    handler: functions/index.createCustomer
    events:
      - http:
          method: get
          path: payment
          cors: true
  payment:
    handler: functions/index.payment
    events:
      - http:
          method: post
          path: payment
          cors: true
  createPuja:
    handler: functions/index.createPuja
    events:
      - http:
          method: post
          path: pujas
          cors: true
  updatePuja:
    handler: functions/index.updatePuja
    events:
      - http:
          method: patch
          path: pujas
          cors: true
  deletePuja:
    handler: functions/index.deletePuja
    events:
      - http:
          method: delete
          path: pujas/{id}
          cors: true
  getFaq:
    handler: functions/index.getFaqById
    events:
      - http:
          method: get
          path: faqs/{id}
          cors: true
  getAllFaqs:
    handler: functions/index.readAllFaqs
    events:
      - http:
          method: get
          path: faqs
          cors: true
  createFaq:
    handler: functions/index.createFaq
    events:
      - http:
          method: post
          path: faqs
          cors: true
  updateFaq:
    handler: functions/index.updateFaq
    events:
      - http:
          method: patch
          path: faqs
          cors: true
  deleteFaq:
    handler: functions/index.deleteFaq
    events:
      - http:
          method: delete
          path: faqs/{id}
          cors: true
  createBooking:
    handler: functions/index.createBooking
    events:
      - http:
          method: post
          path: Booking
          cors: true
  getAllBookings:
    handler: functions/index.getAllBookings
    events:
      - http:
          method: get
          path: Booking
          cors: true
  getBookingsByPhoneNumber:
    handler: functions/index.getBookingsByPhoneNumber
    events:
      - http:
          method: get
          path: Booking/{id}
          cors: true
  deleteBooking:
    handler: functions/index.deleteBooking
    events:
      - http:
          method: delete
          path: Booking/{id}
          cors: true
  searchPuja:
    handler: functions/index.searchPuja
    events:
      - http:
          method: get
          path: searchPuja
          cors: true
  
         
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
  # S3
  - ${file(resources/s3-bucket.yml)}
  # Cognito
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
